<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>鲫鱼别动</title>
  
  <subtitle>野生前端</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-28T15:50:16.353Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yoga</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 koa-session 进行用户鉴权与踩坑记录</title>
    <link href="http://yoursite.com/2019/09/28/%E4%BD%BF%E7%94%A8-koa-seesion-%E8%BF%9B%E8%A1%8C%E7%94%A8%E6%88%B7%E9%89%B4%E6%9D%83%E4%B8%8E%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2019/09/28/使用-koa-seesion-进行用户鉴权与踩坑记录/</id>
    <published>2019-09-28T11:50:42.000Z</published>
    <updated>2019-09-28T15:50:16.353Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>最近业务项目上在做一个用户登录及鉴权的机制，需要实现的功能有：</p><ul><li>为本站点(以下简称 A 站点)的前端应用提供登录接口，并维持用户的登录状态</li><li>用户在微信浏览器中通过登录接口登录时将该用户的微信 openId 与登录账号绑定</li><li>后续用户再次通过微信浏览器进入 A 站点或同一微信公众号下的其他站点(以下简称 B 站点)时直接静默登录</li><li>通过已实现的登录功能，实现用户鉴权</li><li>与另外一个 B 站点实现互信登录，同步用户的登录状态</li></ul><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>A 站点技术栈为 koa + next.js + Typescript，发布到生产环境时集群部署了两个应用实例，通过轮询的方式进行负载均衡。</p><p>目前比较<a href="https://blog.csdn.net/wang839305939/article/details/78713124" target="_blank" rel="noopener">常见的 web 鉴权方式</a>有:</p><ul><li>HTTP Basic Authentication</li><li>session-cookie</li><li>Token 验证</li><li>OAuth(开放授权)</li></ul><p>由于 A 站点与需要 B 站点都是同一父域下的 B/S 架构应用。并且B 站点现有的用户鉴权机制也是通过 session-cookie 实现的，故 A 站点也采用了 session-cookie 方式实现。</p><p>由于现有的 web 框架为 koa，选用了 koa-session 这个官方提供的中间件作为 session 中间件。</p><p>基于以下几点原因，采用 koa-redis 实现 session 的外部存储：</p><ul><li>浏览器的 cookie 有大小限制</li><li>安全上的考虑</li><li>session 的持久化需求</li><li>session 的集群共享</li><li>session 的跨站点共享</li><li>redis-cluster 的支持</li><li>官方实现</li></ul><h2 id="业务流程"><a href="#业务流程" class="headerlink" title="业务流程"></a>业务流程</h2><div id="flowchart-0" class="flow-chart"></div><h2 id="碰到的坑"><a href="#碰到的坑" class="headerlink" title="碰到的坑"></a>碰到的坑</h2><h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><p>koa-session 在写入cookies的时候一直错误： <strong>Cannot set headers after they are sent to the client</strong></p><p><img src="http://qiniu.jiyujia.com/1569382799271-6d495986-51bc-4a8c-836a-33cda98ccf44.png" alt="error"></p><h3 id="排坑过程"><a href="#排坑过程" class="headerlink" title="排坑过程"></a>排坑过程</h3><ul><li>一开始出现这个原因以为是 redisStore 写入时的异步流程没控制好的原因，于是去翻了 koa-session 关于 session 外置存储的 setter 逻辑，发现并没有什么问题，无解。</li><li>后来又发现官方有一个实现 redisStore 的库 koa-redis，抱着试试看的心理把自己实现的 redisStore 换成了 koa-redis，问题依旧，无解。</li><li>接着在 GitHub 搜了一些别人开源出来的 next.js + koa +koa-session 的项目源码，可是那些项目的 session 信息都是在登录接口写入的，并没有在页面渲染时写入 session 的情况，无解。</li><li>接着怀疑是 session 中间件的执行顺序问题，调整了之后情况依旧，无解。</li><li>接着在本项目中试着手动 setCookie 或在api 接口中使用 session ，此时都没有问题。</li><li>这样子大概确定出现问题的原因大概确定了就是 nest.js 和 koa-session 在结合使用的时候出现的冲突。</li><li>想起之前在做 egg 和 next.js 整合的时候看到一条关于 egg 和 next.js 的 <a href="https://github.com/eggjs/egg/issues/3393" target="_blank" rel="noopener">issue</a>，里面似乎提到了 next.js 的底层是 express，于是想到会不会是中间件执行顺序的原因。</li><li>接着再次翻了 koa-session 的 cookie 写入逻辑，发现 cookie 的写入逻辑是后置的，终于定位到原因了。</li></ul><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>koa-session 作为一个 koa 的中间件，支持 koa 的洋葱圈模型，cookie 的写入是作为<a href="https://github.com/koajs/session/blob/master/index.js#L44" target="_blank" rel="noopener">后置处理逻辑</a>执行的。</p><p>而 next.js 的 render 方法在调用时渲染完毕之后会调用 <a href="https://github.com/zeit/next.js/blob/65358b7a3384f75b06478519ceb304a7dfceecd2/packages/next/next-server/server/send-html.ts#L36" target="_blank" rel="noopener">sendHTML</a> 方法将渲染完成的 html 模版返回，而该方法会调用的是 node 原生的 <a href="http://nodejs.cn/api/http.html#http_response_end_data_encoding_callback" target="_blank" rel="noopener">response.end</a> 方法，此时 header 无法再写入。</p><p>这样子会导致 koa-session 中间件要写入的 cookie 信息无法成功写入。<br>这也是为什么 nuxt.js 和 next.js 都推荐将渲染中间件放在最后面执行的原因。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>在 koa-session 的 <a href="https://github.com/koajs/session/blob/master/index.js#L44" target="_blank" rel="noopener">cookie 写入逻辑</a> 中有一个条件 if(opts.autoCommit) 这个变量在 koa-session 文档中的说明是 automatically commit headers (default true) 。</p><p>写得比较简单，但是既然可以设置关闭 session 的 autocommit 肯定也可以手动去触发 cookie 写入，进而达到控制cookie 写入时机控制的目的。</p><p>继续看源码，在 <a href="https://github.com/koajs/session/blob/4ea5a63470b936642a18875997e1a627794d198d/lib/session.js#L122" target="_blank" rel="noopener">Session</a> 这个类里面有 manuallyCommit 方法，这个就是要找的那个钩子了，试了一下确实可以，至此问题解决。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://blog.csdn.net/wang839305939/article/details/78713124" target="_blank" rel="noopener">前后端常见的几种鉴权方式</a></li><li><a href="https://segmentfault.com/a/1190000012412299" target="_blank" rel="noopener">从koa-session中间件源码学习cookie与session</a></li><li><a href="https://segmentfault.com/a/1190000013039187" target="_blank" rel="noopener">koa-session学习笔记</a></li><li><a href="https://github.com/koajs/session/blob/master/index.js#L44" target="_blank" rel="noopener">koa-session cookie 写入相关源码</a></li><li><a href="https://github.com/zeit/next.js/blob/65358b7a3384f75b06478519ceb304a7dfceecd2/packages/next/next-server/server/send-html.ts#L36" target="_blank" rel="noopener">next.js sendHTML 相关源码</a></li><li><a href="http://nodejs.cn/api/http.html#http_response_end_data_encoding_callback" target="_blank" rel="noopener">node.js response.end 文档</a><br><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 用户进入 A 站点页面e1=>end: 结束e2=>end: 结束e3=>end: 结束io1=>inputoutput: 获取 key 为 union_login 的 cookieio2=>inputoutput: 查询 redis 中该 value 对应的 keyio3=>inputoutput: 查询该用户的 session 信息io4=>inputoutput: 从 header 中获取 用户的 UA 信息io5=>inputoutput: 获取 key 为 openid 的 cookieio6=>inputoutput: 调用接口获取该 openid 的账号绑定状态cond1=>condition: 该 cookie 存在?cond2=>condition: redis 中存在 cookie union_login 对应的 value?cond3=>condition: session 信息存在且 login_flag 为 true?cond4=>condition: 是否为微信浏览器环境?cond5=>condition: 该 cookie 存在?cond6=>condition: 该 openid 已绑定?op1=>operation: 调用 A 站点登录服务为用户静默登录并从 redis 中同步用户的登录状态op2=>operation: 将 A 站点的登录状态同步到 union_login 和 redis 中op3=>operation: 到了这里则表明用户未登录,进入下一流程op4=>operation: 以当前 url为 参数重定向到获取 openid 的统一入口后再跳转回来op5=>operation: 调用 A 站点登录服务为用户静默登录并将登录状态同步到 union_login 和 redis 中st->io1->cond1cond1(yes)->io2->cond2cond1(no)->io3->cond3cond2(yes)->op1->e1cond2(no)->cond3cond3(yes)->op2->e1cond3(no)->op3->io4->cond4cond4(yes)->io5->cond5cond4(no)->e2cond5(yes)->io6cond5(no)->op4->io6io6->cond6cond6(yes)->op5->e3cond6(no)->e3</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;项目背景&quot;&gt;&lt;a href=&quot;#项目背景&quot; class=&quot;headerlink&quot; title=&quot;项目背景&quot;&gt;&lt;/a&gt;项目背景&lt;/h2&gt;&lt;p&gt;最近业务项目上在做一个用户登录及鉴权的机制，需要实现的功能有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为本站点(以下简称 A 站点)的前
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/04/08/hello-world/"/>
    <id>http://yoursite.com/2019/04/08/hello-world/</id>
    <published>2019-04-08T07:34:05.082Z</published>
    <updated>2019-04-08T07:34:05.082Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Some Git Commands</title>
    <link href="http://yoursite.com/2017/03/23/git-command/"/>
    <id>http://yoursite.com/2017/03/23/git-command/</id>
    <published>2017-03-22T20:51:18.000Z</published>
    <updated>2019-04-08T07:34:05.081Z</updated>
    
    <content type="html"><![CDATA[<h3 id="删除GitHub上的远程分支"><a href="#删除GitHub上的远程分支" class="headerlink" title="删除GitHub上的远程分支"></a>删除GitHub上的远程分支</h3><p>命令：$「 Git push origin」+「空格」+「冒号」+「分支名字」；<br>该命令推送了空分支，相当于删除。</p><p>举个例子：GitHub上有master和gh-pages分支，现在要删除gh-pages分支，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :gh-pages</span><br></pre></td></tr></table></figure><p>参考链接：<a href="http://blog.csdn.net/android_caishengyan/article/details/49337065" title="如何删除github上的远程分支-android_caishengyan" target="_blank" rel="noopener">如何删除github上的远程分支</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;删除GitHub上的远程分支&quot;&gt;&lt;a href=&quot;#删除GitHub上的远程分支&quot; class=&quot;headerlink&quot; title=&quot;删除GitHub上的远程分支&quot;&gt;&lt;/a&gt;删除GitHub上的远程分支&lt;/h3&gt;&lt;p&gt;命令：$「 Git push origin」
      
    
    </summary>
    
      <category term="Tech Notes" scheme="http://yoursite.com/categories/Tech-Notes/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
</feed>
